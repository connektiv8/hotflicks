user  nginx;
worker_processes  auto;
worker_cpu_affinity auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  4096;
    multi_accept on;
    use kqueue;
}

http {
    include       /usr/local/etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging Configuration
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main buffer=16k;

    # Performance Optimizations
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    
    keepalive_timeout  65;
    keepalive_requests 100;

    # Buffer Sizes
    client_body_buffer_size      128k;
    client_header_buffer_size    1k;
    client_max_body_size         20m;
    large_client_header_buffers  4 4k;

    # Compression
    gzip  on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Streaming Server Configuration
    server {
        listen 80;
        listen 443 ssl http2;
        server_name streaming.hotflicks.local;

        # SSL Configuration
        ssl_certificate     /etc/nginx/ssl/hotflicks.crt;
        ssl_certificate_key /etc/nginx/ssl/hotflicks.key;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        # HLS Streaming Configuration
        location /hls/ {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            
            root /var/www/hotflicks/streaming;
            
            # CORS Configuration
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            add_header 'Cache-Control' 'no-cache';
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        }

        # DASH Streaming Configuration
        location /dash/ {
            root /var/www/hotflicks/streaming;
            
            add_header 'Cache-Control' 'no-cache';
            add_header 'Access-Control-Allow-Origin' '*';
        }
    }

    # Load Balancing and Backend Configuration
    upstream streaming_backend {
        least_conn;
        server 127.0.0.1:8080;
        server 127.0.0.1:8081;
        server 127.0.0.1:8082 backup;
    }

    # Monitoring and Stub Status
    server {
        listen 8088;
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }
}

# Stream Module for Raw TCP/UDP Traffic
stream {
    log_format stream_log '$remote_addr [$time_local] '
                           '$protocol $status $bytes_sent $bytes_received '
                           '$session_time';

    access_log /var/log/nginx/stream_access.log stream_log;

    upstream raw_streaming {
        hash $remote_addr consistent;
        server stream1.hotflicks.local:5000;
        server stream2.hotflicks.local:5000;
        server stream3.hotflicks.local:5000 backup;
    }

    server {
        listen 5000;
        proxy_pass raw_streaming;
    }
}